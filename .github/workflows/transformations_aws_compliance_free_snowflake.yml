name: "Test AWS Compliance Free Policies: Snowflake"

on:
  pull_request:
    paths:
      - "transformations/aws/compliance-free/**"
      - ".github/workflows/transformations_aws_compliance_free_snowflake.yml"
  push:
    branches:
      - main
    paths:
      - "transformations/aws/compliance-free/**"
      - ".github/workflows/transformations_aws_compliance_free_snowflake.yml"

jobs:
  transformations-aws-compliance-free:
    name: transformations/aws/compliance-free
    timeout-minutes: 30
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./transformations/aws/compliance-free
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: "./transformations/aws/compliance-free/requirements.txt"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Setup CloudQuery
        uses: cloudquery/setup-cloudquery@v3
        with:
          version: v4.0.0
      # Test unpacked version
      - name: Migrate DB
        run: cloudquery migrate tests/snowflake.yml
        env:
          SNOWFLAKE_CONNECTION_STRING: "${{ secrets.SNOW_USER }}:${{ secrets.SNOW_PASSWORD }}@${{ secrets.SNOW_ACCOUNT }}.${{ secrets.SNOW_REGION }}/${{ secrets.SNOW_DATABASE }}/${{ secrets.SNOW_SCHEMA }}?warehouse=${{ secrets.SNOW_WAREHOUSE }}"
      - name: Run Policies
        run: |
          dbt run --target dev-snowflake --profiles-dir ./tests --select --select aws_compliance__security_group_ingress_rules, aws_compliance__api_gateway_method_settingse_selected_only, aws_compliance__foundational_security
        env:
          SNOW_USER: ${{ secrets.SNOW_USER }}
          SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
          # DBT assumes the account is in the form of <account>.<region>
          SNOW_ACCOUNT: "${{ secrets.SNOW_ACCOUNT }}.${{ secrets.SNOW_REGION }}"
          SNOW_WAREHOUSE: ${{ secrets.SNOW_WAREHOUSE }}
          SNOW_DATABASE: ${{ secrets.SNOW_DATABASE }}
          SNOW_SCHEMA: ${{ secrets.SNOW_SCHEMA }}
          SNOW_REGION: ${{ secrets.SNOW_REGION }}
      # Test packed version
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: scripts/dbt-pack/package-lock.json
      - name: Install Dependencies
        run: npm ci
        working-directory: ./scripts/dbt-pack
      - name: Pack DBT
        working-directory: ./scripts/dbt-pack
        run: node index.js dbt-pack --project-dir=../../transformations/aws/compliance-free
      - name: Unzip Packed DBT
        run: unzip -o build/aws_compliance_free.zip -d build/aws_compliance_free
      - name: Run Unpacked DBT
        working-directory: ./transformations/aws/compliance-free/build/aws_compliance_free
        run: |
          dbt run --target dev-snowflake --profiles-dir ../../tests --select --select aws_compliance__security_group_ingress_rules, aws_compliance__api_gateway_method_settingse_selected_only, aws_compliance__foundational_security
        env:
          SNOW_USER: ${{ secrets.SNOW_USER }}
          SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
          # DBT assumes the account is in the form of <account>.<region>
          SNOW_ACCOUNT: "${{ secrets.SNOW_ACCOUNT }}.${{ secrets.SNOW_REGION }}"
          SNOW_WAREHOUSE: ${{ secrets.SNOW_WAREHOUSE }}
          SNOW_DATABASE: ${{ secrets.SNOW_DATABASE }}
          SNOW_SCHEMA: ${{ secrets.SNOW_SCHEMA }}
          SNOW_REGION: ${{ secrets.SNOW_REGION }}